# Widget for dynamic threshold selection
dbutils.widgets.text("score_threshold", "800", "Score Threshold")
threshold = int(dbutils.widgets.get("score_threshold"))

import time
from IPython.display import clear_output
import matplotlib.pyplot as plt
import pandas as pd
from delta.tables import DeltaTable
from pyspark.sql import SparkSession

# Set up Spark and Delta table
spark = SparkSession.builder.getOrCreate()
delta_path = "/tmp/stream_transactions"
table = DeltaTable.forPath(spark, delta_path)

# Fetch threshold from widget
threshold = int(dbutils.widgets.get("score_threshold"))

# Live dashboard loop
for i in range(50):  # Run 50 times (~8 minutes)
    clear_output(wait=True)

    # Load recent 1000 transactions
    df = (
        table.toDF()
        .orderBy("timestamp", ascending=False)
        .limit(1000)
        .toPandas()
    )

    if df.empty:
        print("⏳ Waiting for transactions...")
        time.sleep(10)
        continue

    last_200 = df.head(200)

    # Plot score distribution - overall
    fig1, ax1 = plt.subplots()
    ax1.hist(df["score"], bins=20)
    ax1.set_title("📊 Score Distribution (Overall)")
    ax1.set_xlabel("Score")
    ax1.set_ylabel("Count")
    plt.show()

    # Plot score distribution - last 200
    fig2, ax2 = plt.subplots()
    ax2.hist(last_200["score"], bins=20)
    ax2.set_title("📊 Score Distribution (Last 200)")
    ax2.set_xlabel("Score")
    ax2.set_ylabel("Count")
    plt.show()

    # Compute fraud detection metrics
    fraud_total = df[df["is_fraud"] == 1]
    high_score = df[df["score"] > threshold]
    fraud_detected = high_score[high_score["is_fraud"] == 1]

    detection_rate = len(fraud_detected) / len(fraud_total) if len(fraud_total) > 0 else 0
    fraud_value_total = fraud_total["amount"].sum()
    fraud_value_detected = fraud_detected["amount"].sum()
    value_detection_rate = fraud_value_detected / fraud_value_total if fraud_value_total > 0 else 0

    # Print summary metrics
    print(f"📌 Key Metrics (Threshold: {threshold})")
    print(f"----------------------------------------")
    print(f"Total Transactions:         {len(df):,}")
    print(f"Detected Fraud Count:       {len(fraud_detected):,}")
    print(f"Detected Fraud Value:       ${fraud_value_detected:,.2f}")
    print(f"Fraud Detection Rate:       {detection_rate:.2%}")
    print(f"Fraud Value Detection Rate: {value_detection_rate:.2%}")

    time.sleep(10)
